import tensorflow as tf
from tensorflow.keras import backend as K

from nets.ious import box_ciou


#---------------------------------------------------#
#   平滑标签
#---------------------------------------------------#
def _smooth_labels(y_true, label_smoothing):   # true_class_probs = y_true[l][..., 5:]     label_smoothing = 0.1
    num_classes = tf.cast(K.shape(y_true)[-1], dtype=K.floatx())
    label_smoothing = K.constant(label_smoothing, dtype=K.floatx())
    return y_true * (1.0 - label_smoothing) + label_smoothing / num_classes

#---------------------------------------------------#
#   将预测值的每个特征层调成真实值
#---------------------------------------------------#
def yolo_head(feats, anchors, num_classes, input_shape, calc_loss=False):   # feats = yolo_outputs(整个yolo网络的某一层输出，共有3层)
    num_anchors = len(anchors)  # num_anchors = 3
    #---------------------------------------------------#
    #   [1, 1, 1, num_anchors, 2]
    #---------------------------------------------------#
    anchors_tensor = K.reshape(K.constant(anchors), [1, 1, 1, num_anchors, 2])
    # tf.Tensor([[[[[142. 110.] [192. 243.] [459. 401.]]]]], shape = (1, 1, 1, 3, 2), dtype = float32)
    #---------------------------------------------------#
    #   获得x，y的网格
    #  grid_x.shape = (13, 13, 1, 1)
    #  grid_y.shape = (13, 13, 1, 1)
    #  grid.shape =  (13, 13, 1, 2)
    #---------------------------------------------------#
    grid_shape = K.shape(feats)[1:3] # height, width
    grid_y = K.tile(K.reshape(K.arange(0, stop=grid_shape[0]), [-1, 1, 1, 1]),
        [1, grid_shape[1], 1, 1])
    grid_x = K.tile(K.reshape(K.arange(0, stop=grid_shape[1]), [1, -1, 1, 1]),
        [grid_shape[0], 1, 1, 1])
    grid = K.concatenate([grid_x, grid_y])
    grid = K.cast(grid, K.dtype(feats))
    '''
grid = tf.Tensor(
[[[[ 0  0]] [[ 1  0]] [[ 2  0]] [[ 3  0]] [[ 4  0]] [[ 5  0]] [[ 6  0]] [[ 7  0]] [[ 8  0]] [[ 9  0]] [[10  0]] [[11  0]] [[12  0]]]
 [[[ 0  1]] [[ 1  1]] [[ 2  1]] [[ 3  1]] [[ 4  1]] [[ 5  1]] [[ 6  1]] [[ 7  1]] [[ 8  1]] [[ 9  1]] [[10  1]] [[11  1]] [[12  1]]]
 [[[ 0  2]] [[ 1  2]] [[ 2  2]] [[ 3  2]] [[ 4  2]] [[ 5  2]] [[ 6  2]] [[ 7  2]] [[ 8  2]] [[ 9  2]] [[10  2]] [[11  2]] [[12  2]]]
 [[[ 0  3]] [[ 1  3]] [[ 2  3]] [[ 3  3]] [[ 4  3]] [[ 5  3]] [[ 6  3]] [[ 7  3]] [[ 8  3]] [[ 9  3]] [[10  3]] [[11  3]] [[12  3]]]
 [[[ 0  4]] [[ 1  4]] [[ 2  4]] [[ 3  4]] [[ 4  4]] [[ 5  4]] [[ 6  4]] [[ 7  4]] [[ 8  4]] [[ 9  4]] [[10  4]] [[11  4]] [[12  4]]]
 [[[ 0  5]] [[ 1  5]] [[ 2  5]] [[ 3  5]] [[ 4  5]] [[ 5  5]] [[ 6  5]] [[ 7  5]] [[ 8  5]] [[ 9  5]] [[10  5]] [[11  5]] [[12  5]]]
 [[[ 0  6]] [[ 1  6]] [[ 2  6]] [[ 3  6]] [[ 4  6]] [[ 5  6]] [[ 6  6]] [[ 7  6]] [[ 8  6]] [[ 9  6]] [[10  6]] [[11  6]] [[12  6]]]
 [[[ 0  7]] [[ 1  7]] [[ 2  7]] [[ 3  7]] [[ 4  7]] [[ 5  7]] [[ 6  7]] [[ 7  7]] [[ 8  7]] [[ 9  7]] [[10  7]] [[11  7]] [[12  7]]]
 [[[ 0  8]] [[ 1  8]] [[ 2  8]] [[ 3  8]] [[ 4  8]] [[ 5  8]] [[ 6  8]] [[ 7  8]] [[ 8  8]] [[ 9  8]] [[10  8]] [[11  8]] [[12  8]]]
 [[[ 0  9]] [[ 1  9]] [[ 2  9]] [[ 3  9]] [[ 4  9]] [[ 5  9]]  [[ 6  9]] [[ 7  9]]  [[ 8  9]] [[ 9  9]] [[10  9]] [[11  9]] [[12  9]]]
 [[[ 0 10]] [[ 1 10]] [[ 2 10]] [[ 3 10]] [[ 4 10]] [[ 5 10]] [[ 6 10]] [[ 7 10]] [[ 8 10]] [[ 9 10]] [[10 10]] [[11 10]] [[12 10]]]
 [[[ 0 11]] [[ 1 11]] [[ 2 11]] [[ 3 11]] [[ 4 11]] [[ 5 11]] [[ 6 11]] [[ 7 11]] [[ 8 11]] [[ 9 11]] [[10 11]] [[11 11]] [[12 11]]]
 [[[ 0 12]] [[ 1 12]] [[ 2 12]] [[ 3 12]] [[ 4 12]] [[ 5 12]] [[ 6 12]] [[ 7 12]] [[ 8 12]] [[ 9 12]] [[10 12]] [[11 12]] [[12 12]]]], shape=(13, 13, 1, 2), dtype=int32)
    '''

    #---------------------------------------------------#
    #   将预测结果调整成(batch_size,13,13,3,25)
    #   25可拆分成4 + 1 + 20
    #   4代表的是中心宽高的调整参数
    #   1代表的是框的置信度
    #   20代表的是种类的置信度
    #---------------------------------------------------#
    feats = K.reshape(feats, [-1, grid_shape[0], grid_shape[1], num_anchors, num_classes + 5])
    #  feats.shape = (2, 13, 13, 3, 25)
    #  grid.shape =  (13, 13, 1, 2)
    #---------------------------------------------------#
    #   将预测值调成真实值
    #   box_xy对应框的中心点
    #   box_wh对应框的宽和高
    #---------------------------------------------------#
    box_xy = (K.sigmoid(feats[..., :2]) + grid) / K.cast(grid_shape[...,::-1], K.dtype(feats))         # grid_shape = 13*13
    '''   把数据都归整到了（0，1）范围
    K.sigmoid(feats[..., :2]) =     
    [[1.44997239e-02 9.69960093e-02]
    [7.95021892e-01 2.67733037e-01]
    [4.64320183e-05 5.14447689e-03]]]]], shape=(2, 13, 13, 3, 2), dtype=float32)
    
    # grid.shape = (13, 13, 1, 2)
    # (K.sigmoid(feats[..., :2]) + grid).shape = (2, 13, 13, 3, 2)
    '''
    #  feats.shape = (2, 13, 13, 3, 25)
    box_wh = K.exp(feats[..., 2:4]) * anchors_tensor / K.cast(input_shape[...,::-1], K.dtype(feats))   # input_shape = 416*416
    # anchors_tensor = tf.Tensor([[[[[142. 110.][192. 243.][459. 401.]]]]], shape = (1, 1, 1, 3, 2), dtype = float32)
    '''   把数据都归整到了（0，+无穷大）范围
    K.exp(feats[..., 2:4]) = 
    [[ 1.6292181   0.33624005]
     [18.06277     1.1915153 ]
     [ 0.78413594  0.4706598 ]]]]], shape=(2, 13, 13, 3, 2), dtype=float32)
    
    # anchors_tensor = tf.Tensor([[[[[142. 110.] [192. 243.] [459. 401.]]]]], shape=(1, 1, 1, 3, 2), dtype=float32)
    # K.exp(feats[..., 2:4]) * anchors_tensor= 
      [[ 210.07887    61.724285]
       [ 206.44836   262.87018 ]
       [ 407.53793   366.93243 ]]]]], shape=(2, 13, 13, 3, 2), dtype=float32)
       
    box_wh = 
       [[0.5558987  0.12246906]
        [0.49095365 0.6195495 ]
        [0.93777025 0.91465497]]]]], shape=(2, 13, 13, 3, 2), dtype=float32)
    
    '''
    box_confidence = K.sigmoid(feats[..., 4:5])
    box_class_probs = K.sigmoid(feats[..., 5:])

    #---------------------------------------------------------------------#
    #   在计算loss的时候返回grid, feats, box_xy, box_wh
    #   在预测的时候返回box_xy, box_wh, box_confidence, box_class_probs
    #---------------------------------------------------------------------#
    if calc_loss == True:
        return grid, feats, box_xy, box_wh
    return box_xy, box_wh, box_confidence, box_class_probs

#---------------------------------------------------#
#   用于计算每个预测框与真实框的iou
#---------------------------------------------------#
def box_iou(b1, b2):
    #  b1 = pred_box[b],     b2 = true_box  即有一幅图中的n个真实框
    #   pred_box    13,13,3,4 预测框的坐标   pred_box.shape=(0/1, 13, 13, 3, 4)
    #   true_box    n,4 真实框的坐标         true_box.shape=(n, 4) n是指框的数量

    # 13,13,3,1,4
    # 计算(预测框，也可以说是先验框)左上角的坐标和右下角的坐标
    b1 = K.expand_dims(b1, -2)
    b1_xy = b1[..., :2]
    b1_wh = b1[..., 2:4]
    b1_wh_half = b1_wh/2.
    b1_mins = b1_xy - b1_wh_half
    '''
    b1_mins = 
             [[[ 0.06867366  0.77440387]]
              [[ 0.02583264  0.60598886]]
              [[-0.26203752  0.52684873]]]]], shape=(13, 13, 3, 1, 2), dtype=float32)
    '''
    b1_maxes = b1_xy + b1_wh_half
    '''
    b1_maxes = 
              [[[1.1647618  0.96331763]]
               [[4.4742146  1.2357302 ]]
               [[1.3183087  1.2237749 ]]]]], shape=(13, 13, 3, 1, 2), dtype=float32)
    '''
    # 1,n,4
    # 计算(真实框)左上角和右下角的坐标
    b2 = K.expand_dims(b2, 0)
    b2_xy = b2[..., :2]
    b2_wh = b2[..., 2:4]
    b2_wh_half = b2_wh/2.
    b2_mins = b2_xy - b2_wh_half
    '''
    b2_mins = tf.Tensor(
                        [[[ 0.65384614  0.12019232]
                          [ 0.          0.12019229]
                          [ 0.23677883  0.12259614]
                          [-0.00120193  0.49038464]]], shape=(1, 4, 2), dtype=float32) 
    '''
    b2_maxes = b2_xy + b2_wh_half
    '''
    b2_maxes = tf.Tensor(
                         [[[0.40504807 0.60096157]
                           [0.29447114 0.77403843]
                           [0.453125   0.67427886]
                           [1.         0.97596157]]], shape=(1, 4, 2), dtype=float32)
    '''
    # 计算重合面积
    intersect_mins = K.maximum(b1_mins, b2_mins)  # intersect_mins.shape=(13, 13, 3, 4, 2)  这里的4表示有4个真实框
    intersect_maxes = K.minimum(b1_maxes, b2_maxes)  # intersect_maxes.shape=(13, 13, 3, 4, 2)
    intersect_wh = K.maximum(intersect_maxes - intersect_mins, 0.)  # intersect_wh.shape=(13, 13, 3, 4, 2)
    intersect_area = intersect_wh[..., 0] * intersect_wh[..., 1]  # intersect_area.shape=(13, 13, 3, 4)
    '''
    intersect_area = 
                    [[0.03489513 0.         0.         0.00401693]
                     [0.10158094 0.00509924 0.         0.02102905]
                     [0.15107983 0.10838389 0.05395667 0.10447241]]]], shape=(13, 13, 3, 4), dtype=float32)
    '''
    b1_area = b1_wh[..., 0] * b1_wh[..., 1]
    '''  # b1_wh.shape = (13, 13, 3, 1, 2)
    b1_area = 
             [[0.066751  ]
              [0.32485256]
              [0.85166436]]]], shape=(13, 13, 3, 1), dtype=float32)
    '''
    b2_area = b2_wh[..., 0] * b2_wh[..., 1]
    '''  # b2_wh.shape = (1, 4, 2)
    b2_area = tf.Tensor([[0.11536728 0.07159533 0.05731093 0.06479983]], shape=(1, 4), dtype=float32)  这里的4表示有4个真实框
    
    '''
    iou = intersect_area / (b1_area + b2_area - intersect_area)
    '''  
    b1_area + b2_area = 
                       [[10.035052  20.035051  30.035051  40.035053 ]
                        [13.310212  23.310211  33.31021   43.31021  ]
                        [10.498944  20.498943  30.498943  40.498943 ]]]], shape=(13, 13, 3, 4), dtype=float32)
    iou = 
         [[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]
          [1.95861645e-02 0.00000000e+00 6.04466610e-02 9.91064087e-02]
          [6.58302158e-02 0.00000000e+00 1.02970861e-01 8.75723958e-02]]]], shape=(13, 13, 3, 4), dtype=float32)
    '''

    return iou


#---------------------------------------------------#
#   loss值计算
#---------------------------------------------------#
def yolo_loss(args, anchors, num_classes, ignore_thresh=.5, label_smoothing=0.1, print_loss=False, normalize=True):

    # 一共有三层
    num_layers = len(anchors)//3 

    #---------------------------------------------------------------------------------------------------#
    #   将预测结果和实际ground truth分开，args是[*model_body.output, *y_true]
    #   y_true是一个列表，包含三个特征层，shape分别为(m,13,13,3,25),(m,26,26,3,25),(m,52,52,3,25)。
    #   yolo_outputs是一个列表，包含三个特征层，shape分别为(m,13,13,3,85),(m,26,26,3,85),(m,52,52,3,85)。
    #---------------------------------------------------------------------------------------------------#
    y_true = args[num_layers:]
    yolo_outputs = args[:num_layers]

    #-----------------------------------------------------------#
    #   13x13的特征层对应的anchor是[142, 110], [192, 243], [459, 401]
    #   26x26的特征层对应的anchor是[36, 75], [76, 55], [72, 146]
    #   52x52的特征层对应的anchor是[12, 16], [19, 36], [40, 28]
    #-----------------------------------------------------------#
    anchor_mask = [[6,7,8], [3,4,5], [0,1,2]] if num_layers==3 else [[3,4,5], [1,2,3]]

    # 得到input_shpae为416,416 
    input_shape = K.cast(K.shape(yolo_outputs[0])[1:3] * 32, K.dtype(y_true[0]))

    loss = 0
    num_pos = 0

    #-----------------------------------------------------------#
    #   取出每一张图片
    #   m的值就是batch_size
    #   tf.Tensor(2, shape=(), dtype=int32)
    #   tf.Tensor(2.0, shape=(), dtype=float32)
    #-----------------------------------------------------------#
    m = K.shape(yolo_outputs[0])[0]   # m 就是batch_size
    mf = K.cast(m, K.dtype(yolo_outputs[0]))  # mf 就是m的数据类型

    #---------------------------------------------------------------------------------------------------#
    #   y_true是一个列表，包含三个特征层，shape分别为(m,13,13,3,25),(m,26,26,3,25),(m,52,52,3,25)。
    #   yolo_outputs是一个列表，包含三个特征层，shape分别为(m,13,13,3,85),(m,26,26,3,85),(m,52,52,3,85)。
    #---------------------------------------------------------------------------------------------------#
    for l in range(num_layers):    # num_layers = 3
        #-----------------------------------------------------------#
        #   以第一个特征层(m,13,13,3,85)为例子
        #   取出该特征层中存在目标的点的位置。(m,13,13,3,1)
        #-----------------------------------------------------------#
        object_mask = y_true[l][..., 4:5]   # object_mask.shape=(2, 13, 13, 3, 1)    这1位是存放判断是否有目标的标志位
        #-----------------------------------------------------------#
        #   取出其对应的种类(m,13,13,3,80)
        #-----------------------------------------------------------#
        true_class_probs = y_true[l][..., 5:]
        if label_smoothing:
            true_class_probs = _smooth_labels(true_class_probs, label_smoothing)

        #-----------------------------------------------------------#
        #   将yolo_outputs的特征层输出进行处理、获得四个返回值
        #   其中：
        #   grid        (13,13,1,2) 网格坐标
        #   raw_pred    (m,13,13,3,25) 尚未处理的预测结果
        #   pred_xy     (m,13,13,3,2) 解码后的中心坐标（单位像素值级别的）
        #   pred_wh     (m,13,13,3,2) 解码后的宽高坐标（单位像素值级别的）
        #-----------------------------------------------------------#  yolo_head()  将预测值的每个特征层调成真实值   , 返回的是 grid, feats, box_xy, box_wh
        grid, raw_pred, pred_xy, pred_wh = yolo_head(yolo_outputs[l],
             anchors[anchor_mask[l]], num_classes, input_shape, calc_loss=True)
        # anchors[6,7,8] = [[142, 110],  [192, 243],  [459, 401]]
        #-----------------------------------------------------------#
        #   pred_box是解码后的预测的box的位置
        #   (m,13,13,3,4)
        #-----------------------------------------------------------#
        pred_box = K.concatenate([pred_xy, pred_wh])
        '''
        pred_box = 
           [[0.9247997  0.9317756  0.4654128  0.07353596]
            [0.9817333  0.95278317 4.9408994  0.6001999 ]
            [0.9230874  0.92386234 0.8071982  0.6228367 ]]]]], shape=(2, 13, 13, 3, 4), dtype=float32)
        '''
        #-----------------------------------------------------------#
        #   找到负样本群组，第一步是创建一个数组，[], 参数size应该指的是数据的维度
        #   ta = tf.TensorArray(size, dtype, dynamic_size=True)  # dynamic_size指定数组长度可变
        #   ta.stack(name=None)  # 将TensorArray中元素叠起来当做一个Tensor输出
        #   ta.unstack(value, name=None)  # 可以看做是stack的反操作，输入Tensor，输出一个新的TensorArray对象，value按照其axis=0进行分割
        #   ta.write(index, value, name=None)  # 指定index位置写入Tensor
        #   ta.read(index, name=None)  # 读取指定index位置的Tensor
        #-----------------------------------------------------------#
        ignore_mask = tf.TensorArray(K.dtype(y_true[0]), size=1, dynamic_size=True)  # 建立忽略数组

        object_mask_bool = K.cast(object_mask, 'bool')   # 建立目标 mask
        '''
        object_mask_bool = 
           [[False]
           [False]
           [False]]]]], shape=(2, 13, 13, 3, 1), dtype=bool)
        '''
        #-----------------------------------------------------------#
        #   对每一张图片计算ignore_mask
        #-----------------------------------------------------------#
        def loop_body(b, ignore_mask):
            #-----------------------------------------------------------#
            #   取出n个真实框：n,4
            #-----------------------------------------------------------#
            true_box = tf.boolean_mask(y_true[l][b,...,0:4], object_mask_bool[b,...,0])
            '''# 下面是3张图片(1个tensor表示1张图片)13*13下的 true_box = 
            tf.Tensor([[0.23076923 0.39423078 0.46394232 0.6370192 ]
                       [0.84134614 0.48798078 0.31730768 0.97836536]
                       [0.15384616 0.5673077  0.31009614 0.5360577 ]
                       [0.26442307 0.59375    0.52884614 0.34615386]], shape=(4, 4), dtype=float32)
            tf.Tensor([[0.48076922 0.5745192  0.5192308  0.4471154 ]], shape=(1, 4), dtype=float32)
            tf.Tensor([], shape=(0, 4), dtype=float32)
            '''
            #-----------------------------------------------------------#
            #   计算预测框与真实框的iou
            #   pred_box    13,13,3,4 预测框的坐标   pred_box.shape=(0/1, 13, 13, 3, 4)
            #   true_box    n,4 真实框的坐标         true_box.shape=(n, 4) n是指框的数量
            #   iou         13,13,3,n 预测框和真实框的iou  ,  n 是真实框的数量
            #-----------------------------------------------------------#
            iou = box_iou(pred_box[b], true_box)
            '''
            iou = 
                  [[0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00]
                   [1.95861645e-02 0.00000000e+00 6.04466610e-02 9.91064087e-02]
                   [6.58302158e-02 0.00000000e+00 1.02970861e-01 8.75723958e-02]]]], shape=(13, 13, 3, 4), dtype=float32)  # 这里的4表示有4个真实框
            '''
            #-----------------------------------------------------------#
            #   best_iou    13,13,3 每个特征点的3个预测框(或者说先验框)分别与真实框的最大重合程度（选出重合程度最大的那个真实框）
            #-----------------------------------------------------------#
            best_iou = K.max(iou, axis=-1)
            '''
            best_iou = 
                      [[4.13803309e-02 1.08396851e-01 1.72491774e-01]
                       [4.82275821e-02 1.35874927e-01 2.01847255e-01]
                       [6.17241934e-02 1.73561975e-01 1.93053201e-01]
                       [8.45429078e-02 2.13782594e-01 1.83550969e-01]
                       [8.45058858e-02 2.04161316e-01 1.88052028e-01]
                       [9.40552056e-02 2.18524531e-01 1.85493335e-01]
                       [7.59290010e-02 1.79791316e-01 1.81193098e-01]
                       [5.48521355e-02 1.36701912e-01 1.76284894e-01]
                       [3.82763483e-02 1.01086713e-01 1.72399461e-01]
                       [1.20606767e-02 7.07304552e-02 1.35685608e-01]
                       [0.00000000e+00 1.24238409e-01 9.95226875e-02]
                       [0.00000000e+00 4.66010645e-02 6.46045282e-02]
                       [0.00000000e+00 5.17809279e-02 2.35719904e-02]]], shape=(13, 13, 3), dtype=float32)
            '''
            #-----------------------------------------------------------#
            #   判断预测框和真实框的最大iou小于ignore_thresh
            #   则认为该预测框没有与之对应的真实框
            #   该操作的目的是：
            #   忽略预测结果与真实框非常对应特征点，因为这些框已经比较准了
            #   不适合当作负样本，所以忽略掉。
            #-----------------------------------------------------------#
            ''' 下面的代码的输出案例： 1表示应该忽略的框
            K.cast(best_iou < 0.5, K.dtype(true_box)) = 
                                                       [[1. 1. 1.]
                                                        [1. 0. 1.]
                                                        [0. 0. 1.]
                                                        [0. 1. 1.]
                                                        [1. 1. 1.]
                                                        [1. 1. 1.]
                                                        [1. 1. 1.]
                                                        [1. 1. 1.]
                                                        [1. 1. 1.]
                                                        [1. 1. 1.]
                                                        [1. 1. 1.]
                                                        [1. 1. 1.]
                                                        [1. 1. 1.]]], shape=(13, 13, 3), dtype=float32)
            '''
            ignore_mask = ignore_mask.write(b, K.cast(best_iou<ignore_thresh, K.dtype(true_box)))
            return b+1, ignore_mask

        #-----------------------------------------------------------#
        #   在这个地方进行一个循环、循环是对每一张图片进行的
        #   final_state = tf.while_loop(cond, loop_body, init_state)     cond 是一个函数，负责判断继续执行循环的条件。
        #   def while_loop(cond, loop_body, init_state):
        #       state = init_state
        #       while (cond(state)):   ＃ 使用cond函数判断是否达到循环结束条件。
        #             state = loop_body(state)   ＃ 使用loop_body函数对state进行更新。
        #       return state
        #-----------------------------------------------------------#
        _, ignore_mask = tf.while_loop(lambda b,*args: b<m, loop_body, [0, ignore_mask])

        #-----------------------------------------------------------#
        #   ignore_mask用于提取出作为负样本的特征点
        #   (m,13,13,3)
        #-----------------------------------------------------------#
        ignore_mask = ignore_mask.stack()
        '''
        ignore_mask = 
                     [[1. 1. 1.]
                      [1. 1. 1.]
                      [1. 1. 1.]
                      ...
                      [1. 1. 1.]
                      [1. 1. 1.]
                      [1. 1. 1.]]]], shape=(2, 13, 13, 3), dtype=float32)
        '''
        #   (m,13,13,3,1)
        ignore_mask = K.expand_dims(ignore_mask, -1)
        '''
        ignore_mask = 
                      ...
                         [[1.]
                          [1.]
                          [1.]]
                         [[1.]
                          [1.]
                          [1.]]
                         [[1.]
                          [1.]
                          [1.]]]]], shape=(2, 13, 13, 3, 1), dtype=float32)
        '''
        #=========================================================   似乎上下不相关   ========================
        #-----------------------------------------------------------#
        #   真实框越大，比重越小，小框的比重更大。
        #-----------------------------------------------------------#
        box_loss_scale = 2 - y_true[l][...,2:3]*y_true[l][...,3:4]
        '''
        box_loss_scale = 
                        [[2.]
                         [2.]
                         [2.]]
                        [[2.]
                         [2.]
                         [2.]]]]], shape=(2, 13, 13, 3, 1), dtype=float32)
        '''
        #-----------------------------------------------------------#
        #   计算Ciou loss
        #-----------------------------------------------------------#
        raw_true_box = y_true[l][...,0:4]
        ciou = box_ciou(pred_box, raw_true_box)    # pred_box.shape = (m,13,13,3,4)     raw_true_box.shape = (m,13,13,3,4)  返回的 ciou.shape=(2, 13, 13, 3, 1)
        ciou_loss = object_mask * box_loss_scale * (1 - ciou)     # object_mask 表示是否有目标(物体); box_loss_scale 表示真实框的大小(框越大表示带来的损失越小); ciou 表示真实框与预测框重合程度(重叠度越大损失越小)
        '''
        ciou_loss = 
                   [[0.]
                    [0.]
                    [0.]]
                   [[0.]
                    [0.]
                    [0.]]]]], shape=(2, 13, 13, 3, 1), dtype=float32)
        '''
        #------------------------------------------------------------------------------#
        #   如果该位置本来有框，那么计算1与置信度的交叉熵
        #   如果该位置本来没有框，那么计算0与置信度的交叉熵
        #   在这其中会忽略一部分样本，这些被忽略的样本满足条件best_iou<ignore_thresh
        #   该操作的目的是：
        #   忽略预测结果与真实框非常对应特征点，因为这些框已经比较准了
        #   不适合当作负样本，所以忽略掉。
        #   object_mask.shape=(2, 13, 13, 3, 1)
        #   raw_pred[...,4:5].shape=(2, 13, 13, 3, 1)
        #   ignore_mask.shape=(2, 13, 13, 3, 1)
        #------------------------------------------------------------------------------#   交叉熵 一般用来求目标与预测值之间的差距。
        confidence_loss = object_mask * K.binary_crossentropy(object_mask, raw_pred[...,4:5], from_logits=True)+ \
            (1-object_mask) * K.binary_crossentropy(object_mask, raw_pred[...,4:5], from_logits=True) * ignore_mask    # ignore_mask 表示 在无目标群体中再进一步选择出 小于ignore_thresh 的框作为负样本。
        '''
        confidence_loss = 
                         [[3.83604050e-22]
                          [1.62698704e-20]
                          [2.56564450e-14]]
                         [[2.29607847e-24]
                          [8.39480683e-22]
                          [7.47601647e-14]]]]], shape=(2, 13, 13, 3, 1), dtype=float32)
        '''
        class_loss = object_mask * K.binary_crossentropy(true_class_probs, raw_pred[...,5:], from_logits=True)
        '''
        class_loss = 
                    [[0. 0. 0. ... 0. 0. 0.]
                     [0. 0. 0. ... 0. 0. 0.]
                     [0. 0. 0. ... 0. 0. 0.]]
                    [[0. 0. 0. ... 0. 0. 0.]
                     [0. 0. 0. ... 0. 0. 0.]
                     [0. 0. 0. ... 0. 0. 0.]]]]], shape=(2, 13, 13, 3, 20), dtype=float32)
        '''
        location_loss = K.sum(ciou_loss)     # tf.Tensor(1.1749101, shape=(), dtype=float32)
        confidence_loss = K.sum(confidence_loss)   # tf.Tensor(10.409097, shape=(), dtype=float32)
        class_loss = K.sum(class_loss)     #  tf.Tensor(17.312925, shape=(), dtype=float32)
        #-----------------------------------------------------------#
        #   计算正样本数量
        #-----------------------------------------------------------#
        num_pos += tf.maximum(K.sum(K.cast(object_mask, tf.float32)), 1)   # 1是为了保证后面做除法时，分母不为0.
        # 第一个 num_pos = tf.Tensor(5.0, shape=(), dtype=float32)
        loss += location_loss + confidence_loss + class_loss     # loss是1个数 = tf.Tensor(18.74815, shape=(), dtype=float32)

    loss = K.expand_dims(loss, axis=-1)      # loss是含1个元素的一维数组 = tf.Tensor([18.74815], shape=(1,), dtype=float32)
    
    if normalize:
        loss = loss / num_pos
    else:
        loss = loss / mf
    return loss
